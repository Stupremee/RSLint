import ast
import vec
import inputs
import config
import name_in_scope

output relation TypeofUndef(whole_expr: ExprId, undefined_expr: ExprId, file: FileId)
TypeofUndef(whole_expr, undefined_expr, file) :-
    File(file, _, _, Config { .typeof_undef = typeof_undef, .no_undef = no_undef }),
    typeof_undef or no_undef,

    NameRef(undefined_expr, file, name),
    Expression(undefined_expr, file, ExprNameRef, scope, span),
    not NameInScope(file, name, scope, _, _, _, _),
    // Expressions like `typeof not_undefined` are allowed under NoUndef
    // and are instead output through TypeofUndef
    WithinTypeofExpr(whole_expr, undefined_expr, file).

relation WithinTypeofExpr(type_of: ExprId, expr: ExprId, file: FileId)
// `typeof not_defined`
WithinTypeofExpr(type_of, expr, file) :-
    File(file, _, _, Config { .typeof_undef = typeof_undef, .no_undef = no_undef }),
    typeof_undef or no_undef,

    UnaryOp(type_of, file, Some { UnaryTypeof }, Some { expr }).

// `typeof (not_defined)`
WithinTypeofExpr(type_of, grouped, file) :-
    File(file, _, _, Config { .typeof_undef = typeof_undef, .no_undef = no_undef }),
    typeof_undef or no_undef,

    WithinTypeofExpr(type_of, expr, file),
    Expression(expr, file, ExprGrouping { Some { grouped }}, _, _).

// `typeof (defined, not_defined)`
WithinTypeofExpr(type_of, last, file) :-
    File(file, _, _, Config { .typeof_undef = typeof_undef, .no_undef = no_undef }),
    typeof_undef or no_undef,

    WithinTypeofExpr(type_of, expr, file),
    Expression(expr, file, ExprSequence { sequence }, _, _),
    Some { var last } = sequence.last().
