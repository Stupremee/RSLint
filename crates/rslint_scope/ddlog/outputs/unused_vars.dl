import ast
import inputs
import config
import is_exported
import name_in_scope

output relation UnusedVariables(name: Name, declared: AnyId, span: Span, file: FileId)
// Only hit non-function arguments and non-globals
UnusedVariables(name, declared, span, file) :-
    File(file, _, _, config),
    config.no_unused_vars_enabled(),
    NameInScope(file, name, _, Some { span }, declared, false, false, _),
    not declared.is_global(),
    not IsExported(file, declared),
    not VariableUsages(file, name, _, declared).

// For names that are function arguments, it doesn't matter if the parent
// function is exported or not
UnusedVariables(name, declared, span, file) :-
    File(file, _, _, config),
    config.no_unused_vars_enabled(),
    NameInScope(file, name, _, Some { span }, declared, false, true, _),
    not declared.is_global(),
    not VariableUsages(file, name, _, declared).

// Handle globals
UnusedVariables(name, declared, span, file) :-
    File(file, _, _, config),
    config.no_unused_vars_enabled(),
    NameInScope(file, name, _, Some { span }, declared @ AnyIdGlobal { global }, false, false, _),
    not IsExported(file, declared),
    not VariableUsages(file, name, _, declared).

relation VariableUsages(file: FileId, name: Name, scope: ScopeId, declared_in: AnyId)
VariableUsages(file, name, scope, declared) :-
    File(file, _, _, config),
    config.no_unused_vars_enabled(),
    NameInScope(file, name, scope, _, declared, _, _, _),
    NameRef(expr, file, name),
    Expression(expr, file, _, scope, _).
