import ast
import vec
import utils
import scopes
import inputs
import config
import name_in_scope

output relation NoShadow(
    variable: Name,
    original: (AnyId, Span),
    shadower: (AnyId, Span),
    implicit: bool,
    file: FileId,
)

// Unhoisted variables
NoShadow(variable_name, (initial_id, initial_span), (shadower_id, shadower_span), false, file) :-
    // Only analyze a file if NoShadow is enabled
    File(file, _, _, config),
    config.no_shadow_enabled(),

    NameInScope(
        file,
        variable_name,
        name_scope,
        Some { initial_span },
        initial_id,
        false,
        inital_is_arg,
        _,
    ),
    // Get the declaration scope of the shadowed
    ScopeOfId(initial_id, file, initial_id_scope),
    var initial_scope = if inital_is_arg { name_scope } else { initial_id_scope },

    // Get the shadowing variable
    NameInScope(
        file,
        variable_name,
        name_scope,
        Some { shadower_span },
        shadower_id,
        // Implicit variables cannot shadow things
        false,
        shadower_is_arg,
        _,
    ),
    // Get the declaration scope of the shadower
    ScopeOfId(shadower_id, file, shadower_id_scope),
    var shadower_scope = if shadower_is_arg { name_scope } else { shadower_id_scope },

    // Make sure the shadower and shadowed aren't the same variables and that
    // the shadowed variable is lexically in front of the shadower
    initial_span != shadower_span and initial_span < shadower_span,

    // Make sure the inital variable is a direct parent of the shadower
    ChildScope(initial_scope, shadower_scope, file).

// Hoisted variables
NoShadow(variable_name, (initial_id, initial_span), (shadower_id, shadower_span), false, file) :-
    // Only do hoisted scopes when hoisting is enabled
    File(file, _, _, config),
    config.no_shadow_enabled() and config.no_shadow_hoisting(),

    // Get the inital variable, the one that is being shadowed
    NameInScope(
        file,
        variable_name,
        name_scope,
        Some { initial_span },
        initial_id,
        false,
        false,
        _,
    ),
    // If only function hoisting is enabled, only hoist functions
    if (config.no_shadow_hoist_functions()) { initial_id.is_function() } else { true },
    // Get the declaration scope of the shadowed
    ScopeOfId(initial_id, file, initial_scope),

    // Get the shadowing variable
    NameInScope(
        file,
        variable_name,
        name_scope,
        Some { shadower_span },
        shadower_id,
        // Implicit variables cannot shadow things
        false,
        shadower_is_arg,
        _,
    ),
    // Get the declaration scope of the shadower
    ScopeOfId(shadower_id, file, shadower_scope),

    // Make sure the shadower and shadowed aren't the same variables and that
    // the shadowed variable is lexically behind of the shadower
    initial_span != shadower_span and initial_span > shadower_span,
    // Make sure the initial variable is able to be hoisted
    IsHoistable(initial_id, file, true),

    // Get the hoisted scope of the initial variable
    FunctionLevelScope(initial_scope, hoisted_scope, file, _),
    // Make sure the hoisted variable is a direct parent of the shadower
    ChildScope(hoisted_scope, shadower_scope, file).
