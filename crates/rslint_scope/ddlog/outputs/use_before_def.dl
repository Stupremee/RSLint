import vec
import ast
import utils
import group
import inputs
import scopes
import name_in_scope

// TODO: Strip extra info and give fields better names,
//       lint consumers can get needed info via queries
typedef UseBeforeDef = UseBeforeDef {
    name: Name,
    used: ExprId,
    used_in: Span,
    declared: AnyId,
    declared_in: Span,
    file: FileId,
}


// Using variables, classes and functions before they're defined
output relation UseBeforeDef[UseBeforeDef]

// ```js
// foo(bar);
// var bar = 10; // used before def
// ```
UseBeforeDef(name, expr, used_in, declared, declared_in, file) :-
    NameRef(expr, file, name),
    Expression(expr, file, ExprNameRef, used_scope, used_in),
    // Make sure this NameRef isn't the name within a `new` clause,
    // ex. `new Foo(); var Foo;`
    not New(_, file, Some { expr }, _),
    NameInScope(file, name, used_scope, _, declared @ AnyIdStmt { stmt }, _),
    Statement(stmt, file, StmtVarDecl, declared_scope, declared_in),
    declared_scope != used_scope,
    not ChildScope(declared_scope, used_scope, file).

UseBeforeDef(name, expr, used_in, declared, declared_in, file) :-
    New(expr, file, Some { object }, _),
    Expression(expr, file, _, used_scope, used_in),
    NameRef(callee, file, name),
    NameInScope(file, name, used_scope, _, declared @ AnyIdClass { class }, _),
    Class(class, file, Some { Spanned { _, declared_in }}, _, _, decl_scope, _),
    decl_scope != used_scope,
    not ChildScope(decl_scope, used_scope, file).

// TODO: Integrate with directives to ignore functions if the user wants it
UseBeforeDef(name, expr, used_in, declared, declared_in, file) :-
    Call(expr, file, Some { callee }, _),
    Expression(expr, file, _, used_scope, used_in),
    NameRef(callee, file, name),
    NameInScope(file, name, used_scope, _, declared @ AnyIdFunc { func }, _),
    Function(func, file, Some { Spanned { _, declared_in }}, decl_scope, _, _),
    decl_scope != used_scope,
    not ChildScope(decl_scope, used_scope, file).

UseBeforeDef(name, expr, used_in, declared, declared_in, file) :-
    New(expr, file, Some { object }, _),
    Expression(expr, file, _, used_scope, used_in),
    NameRef(object, file, name),
    NameInScope(file, name, used_scope, _, declared @ AnyIdStmt { decl }, _),
    VarDecl(decl, file, _, Some { class }, _),
    ClassExpr(class, file, _),
    Expression(class, file, _, decl_scope, declared_in),
    decl_scope != used_scope,
    not ChildScope(decl_scope, used_scope, file).

UseBeforeDef(name, expr, used_in, declared, declared_in, file) :-
    New(expr, file, Some { object }, _),
    Expression(expr, file, _, used_scope, used_in),
    NameRef(object, file, name),
    NameInScope(file, name, used_scope, _, declared @ AnyIdStmt { decl }, _),
    LetDecl(decl, file, _, Some { class }, _),
    ClassExpr(class, file, _),
    Expression(class, file, _, decl_scope, declared_in),
    decl_scope != used_scope,
    not ChildScope(decl_scope, used_scope, file).

UseBeforeDef(name, expr, used_in, declared, declared_in, file) :-
    New(expr, file, Some { object }, _),
    Expression(expr, file, _, used_scope, used_in),
    NameRef(object, file, name),
    NameInScope(file, name, used_scope, _, declared @ AnyIdStmt { decl }, _),
    ConstDecl(decl, file, _, Some { class }, _),
    ClassExpr(class, file, _),
    Expression(class, file, _, decl_scope, declared_in),
    decl_scope != used_scope,
    not ChildScope(decl_scope, used_scope, file).

UseBeforeDef(name, expr, used_in, AnyIdClass { class }, declared_in, file) :-
    New(expr, file, Some { object }, _),
    Expression(expr, file, _, used_scope, used_in),
    NameRef(object, file, name),
    Class(class, file, Some { Spanned { name, declared_in }}, _, _, declared_scope, _),
    declared_scope != used_scope,
    not ChildScope(declared_scope, used_scope, file).
