start;
commit dump_changes;
start;
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3870}, .name = "Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3871}, .name = "ArrayBuffer"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3872}, .name = "Atomics"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3873}, .name = "BigInt"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3874}, .name = "BigInt64Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3875}, .name = "BigUint64Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3876}, .name = "Boolean"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3877}, .name = "DataView"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3878}, .name = "Date"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3879}, .name = "Error"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3880}, .name = "EvalError"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3881}, .name = "FinalizationRegistry"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3882}, .name = "Float32Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3883}, .name = "Float64Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3884}, .name = "Function"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3885}, .name = "Infinity"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3886}, .name = "Int16Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3887}, .name = "Int32Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3888}, .name = "Int8Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3889}, .name = "JSON"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3890}, .name = "Map"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3891}, .name = "Math"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3892}, .name = "NaN"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3893}, .name = "Number"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3894}, .name = "Object"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3895}, .name = "Promise"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3896}, .name = "Proxy"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3897}, .name = "RangeError"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3898}, .name = "ReferenceError"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3899}, .name = "Reflect"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3900}, .name = "RegExp"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3901}, .name = "Set"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3902}, .name = "SharedArrayBuffer"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3903}, .name = "String"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3904}, .name = "Symbol"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3905}, .name = "SyntaxError"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3906}, .name = "TypeError"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3907}, .name = "URIError"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3908}, .name = "Uint16Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3909}, .name = "Uint32Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3910}, .name = "Uint8Array"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3911}, .name = "Uint8ClampedArray"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3912}, .name = "WeakMap"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3913}, .name = "WeakRef"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3914}, .name = "WeakSet"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3915}, .name = "constructor"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3916}, .name = "decodeURI"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3917}, .name = "decodeURIComponent"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3918}, .name = "encodeURI"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3919}, .name = "encodeURIComponent"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3920}, .name = "escape"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3921}, .name = "eval"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3922}, .name = "globalThis"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3923}, .name = "hasOwnProperty"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3924}, .name = "isFinite"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3925}, .name = "isNaN"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3926}, .name = "isPrototypeOf"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3927}, .name = "parseFloat"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3928}, .name = "parseInt"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3929}, .name = "propertyIsEnumerable"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3930}, .name = "toLocaleString"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3931}, .name = "toString"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3932}, .name = "undefined"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3933}, .name = "unescape"}],
insert inputs::ImplicitGlobal[inputs::ImplicitGlobal{.id = ast::GlobalId{.id = 3934}, .name = "valueOf"}];
commit dump_changes;
start;
insert inputs::InputScope[inputs::InputScope{.parent = ast::Scope{.id = 68}, .child = ast::Scope{.id = 68}}],
insert inputs::EveryScope[ast::Scope{.id = 68}],
insert inputs::NameRef[inputs::NameRef{.expr_id = ast::ExprId{.id = 147}, .value = "partial"}],
insert inputs::Expression[inputs::Expression{.id = ast::ExprId{.id = 147}, .kind = ast::ExprNameRef{}, .scope = ast::Scope{.id = 68}, .span = ast::Span{.start = 27, .end = 34}}],
insert inputs::DotAccess[inputs::DotAccess{.expr_id = ast::ExprId{.id = 148}, .object = ddlog_std::Some{.x = ast::ExprId{.id = 147}}, .prop = ddlog_std::Some{.x = ast::Spanned{.data = "toUpperCase", .span = ast::Span{.start = 35, .end = 46}}}}],
insert inputs::Expression[inputs::Expression{.id = ast::ExprId{.id = 148}, .kind = ast::ExprDot{}, .scope = ast::Scope{.id = 68}, .span = ast::Span{.start = 27, .end = 46}}],
insert inputs::Arrow[inputs::Arrow{.expr_id = ast::ExprId{.id = 149}, .body = ddlog_std::Some{.x = ddlog_std::Left{.l = ast::ExprId{.id = 148}}}}],
insert inputs::Expression[inputs::Expression{.id = ast::ExprId{.id = 149}, .kind = ast::ExprArrow{}, .scope = ast::Scope{.id = 68}, .span = ast::Span{.start = 14, .end = 46}}],
insert inputs::ArrowParam[inputs::ArrowParam{.expr_id = ast::ExprId{.id = 149}, .param = ast::SinglePattern{.name = ddlog_std::Some{.x = ast::Spanned{.data = "partial", .span = ast::Span{.start = 15, .end = 22}}}}}],
insert inputs::InputScope[inputs::InputScope{.parent = ast::Scope{.id = 68}, .child = ast::Scope{.id = 69}}],
insert inputs::EveryScope[ast::Scope{.id = 69}],
insert inputs::LetDecl[inputs::LetDecl{.stmt_id = ast::StmtId{.id = 69}, .pattern = ddlog_std::Some{.x = ast::SinglePattern{.name = ddlog_std::Some{.x = ast::Spanned{.data = "toUpper", .span = ast::Span{.start = 4, .end = 11}}}}}, .value = ddlog_std::Some{.x = ast::ExprId{.id = 149}}}],
insert inputs::Statement[inputs::Statement{.id = ast::StmtId{.id = 69}, .kind = ast::StmtLetDecl{}, .scope = ast::Scope{.id = 69}, .span = ast::Span{.start = 0, .end = 47}}];
commit dump_changes;
start;
clear inputs::If;
clear inputs::ImportDecl;
clear inputs::For;
clear inputs::Function;
clear inputs::NameRef;
clear inputs::Array;
clear inputs::Property;
clear inputs::ArrowParam;
clear inputs::InlineFuncParam;
clear inputs::Label;
clear inputs::Ternary;
clear inputs::Call;
clear inputs::Try;
clear inputs::ClassExpr;
clear inputs::Statement;
clear inputs::Await;
clear inputs::SwitchCase;
clear inputs::BracketAccess;
clear inputs::ExprBigInt;
clear inputs::ExprNumber;
clear inputs::VarDecl;
clear inputs::Continue;
clear inputs::With;
clear inputs::DotAccess;
clear inputs::FunctionArg;
clear inputs::ImplicitGlobal;
clear inputs::Expression;
clear inputs::ForIn;
clear inputs::Arrow;
clear inputs::LetDecl;
clear inputs::Assign;
clear inputs::New;
clear inputs::InlineFunc;
clear inputs::InputScope;
clear inputs::Class;
clear inputs::Template;
clear inputs::ConstDecl;
clear inputs::Throw;
clear inputs::BinOp;
clear inputs::Return;
clear inputs::Break;
clear inputs::Switch;
clear inputs::ExprBool;
clear inputs::Yield;
clear inputs::ExprString;
clear inputs::DoWhile;
clear inputs::UnaryOp;
clear inputs::EveryScope;
clear inputs::While;
commit dump_changes;
